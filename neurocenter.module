<?php

function neurocenter_menu() {
  return null;
}

function neurocenter_field_info() {
  return array(
    'neurocenter' => array(
      'label' => 'Neurocenter',
      'description' => 'A model of neurocenter',
      'default_widget' => 'neurocenter_editor',
      'default_formatter' => 'neurocenter_player'
    ));
}

function neurocenter_field_formatter_info() {
  return array(
    'neurocenter_player' => array(
      'label' => t('Neurocenter JS player'),
      'field types' => array('neurocenter'),
      'settings' => array('width' => 320, 'height' => 240)
    )
  );
}

function neurocenter_field_widget_info() {
  return array(
    'neurocenter_editor' => array(
      'label' => 'Neurocenter editor',
      'field types' => array('neurocenter'),
    )
  );
}

// Implementation of hook_field_widget_form
function neurocenter_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['serialized_network']) ? $items[$delta]['serialized_network'] : neurocenter_empty_network();
  // Get the default address used to build the widget form elements, looking
  // first in the form state, then in the stored value for the field, and then
  // in the default values of the instance.
  $default = array();
  if (!empty($form_state['input'][$langcode][$delta])) {
    // Use the value from the form_state if available.
    $default = $form_state['input'][$langcode][$delta];
  }
  elseif (!empty($items[$delta])) {
    // Else use the saved value for the field.
    $default = $items[$delta];
  }

  $element['#prefix'] = '<div class="neurocenter_editor">';
  $element['#suffix'] = '</div>';

  $element['serialized_network'] = array(
    '#attached' => neurocenter_attachments(),
    '#type' => 'textarea',
    '#default_value' => $value,
  );

  return $element;
}

function neurocenter_field_is_empty($item, $field) {
  return false;
}

function neurocenter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  if ($display['type'] == 'neurocenter_player') {
    $summary .= t('Width') . ': ' . $settings['width'] . '</br>';
    $summary .= t('Height') . ': ' . $settings['height'];
  }

  return $summary;
}

function neurocenter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($display['type'] == 'neurocenter_player') {
    $element['width'] = array(
      '#type' => 'textfield',
      '#title' => t('Width of the simulator block'),
      '#size' => 5,
      '#maxlength' => 5,
      '#default_value' => $settings['width'],
    );
    $element['height'] = array(
      '#type' => 'textfield',
      '#title' => t('Height of the simulator block'),
      '#size' => 5,
      '#maxlength' => 5,
      '#default_value' => $settings['height'],
    );
  }

  return $element;
};


function neurocenter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
  // Address formatted and straight up
    case 'neurocenter_player':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#attached' => neurocenter_attachments(true),
          '#markup' => <<<EOS
<div class='neurocenter_player' data-width={$display['settings']['width']} data-height={$display['settings']['height']}>
  <div class="serialized_network">{$item['serialized_network']}</div>
</div>
EOS
        );
      }
      break;
  }
  return $element;
}

function neurocenter_empty_network() {
  return '{"neurons":[],"links":[],"new_num":1}';
}

// parameter is needed to bypass strange D7 behavior, formatter and widget have arguments in opposite order
function neurocenter_attachments($reverse = false) {
  $js = array(drupal_get_path('module', 'neurocenter') . '/js/spike.js',
              drupal_get_path('module', 'neurocenter') . '/js/neurocenter.js');
  if ($reverse)
    $js = array_reverse($js);

  return array(
    'js' => $js
  );
}
